import datetime
from collections import defaultdict
from typing import Callable
from dotenv import load_dotenv
from langchain_core.runnables import RunnableConfig
from langchain_openai import ChatOpenAI
from langgraph.prebuilt import create_react_agent
from langgraph_swarm import create_handoff_tool, create_swarm

load_dotenv()
model = ChatOpenAI(model="gpt-4o")

# Mock data for tools
RESERVATIONS = defaultdict(lambda: {"flight_info": {}, "hotel_info": {}})

TOMORROW = (datetime.date.today() + datetime.timedelta(days=1)).isoformat()
FLIGHTS = [
    {
        "departure_airport": "BOS",
        "arrival_airport": "JFK",
        "airline": "Jet Blue",
        "date": TOMORROW,
        "id": "1",
    }
]
HOTELS = [
    {
        "location": "New York",
        "name": "McKittrick Hotel",
        "neighborhood": "Chelsea",
        "id": "1",
    }
]


# Flight tools
def search_flights(departure_airport: str, arrival_airport: str, date: str) -> list[dict]:
    """Search flights.

    Args:
        departure_airport: 3-letter airport code for the departure airport. If unsure, use the biggest airport in the area
        arrival_airport: 3-letter airport code for the arrival airport. If unsure, use the biggest airport in the area
        date: YYYY-MM-DD date
    """
    # return all flights for simplicity
    return FLIGHTS


def book_flight(flight_id: str, config: RunnableConfig) -> str:
    """Book a flight."""
    user_id = config["configurable"].get("user_id")
    flight = [flight for flight in FLIGHTS if flight["id"] == flight_id][0]
    RESERVATIONS[user_id]["flight_info"] = flight
    return "Successfully booked flight"


# Hotel tools
def search_hotels(location: str) -> list[dict]:
    """Search hotels.

    Args:
        location: offical, legal city name (proper noun)
    """
    # return all hotels for simplicity
    return HOTELS


def book_hotel(hotel_id: str, config: RunnableConfig) -> str:
    """Book a hotel."""
    user_id = config["configurable"].get("user_id")
    hotel = [hotel for hotel in HOTELS if hotel["id"] == hotel_id][0]
    RESERVATIONS[user_id]["hotel_info"] = hotel
    return "Successfully booked hotel"


# Define handoff tools
transfer_to_hotel_assistant = create_handoff_tool(
    agent_name="hotel_assistant",
    description="Transfer user to the hotel-booking assistant that can search for and book hotels.",
)
transfer_to_flight_assistant = create_handoff_tool(
    agent_name="flight_assistant",
    description="Transfer user to the flight-booking assistant that can search for and book flights.",
)


# Define agent prompt
def make_prompt(base_system_prompt: str) -> Callable[[dict, RunnableConfig], list]:
    def prompt(state: dict, config: RunnableConfig) -> list:
        user_id = config["configurable"].get("user_id")
        current_reservation = RESERVATIONS[user_id]
        system_prompt = (
            base_system_prompt
            + f"\n\nUser's active reservation: {current_reservation}"
            + f"Today is: {datetime.datetime.now()}"
        )
        return [{"role": "system", "content": system_prompt}] + state["messages"]

    return prompt


# Define agents
flight_assistant = create_react_agent(
    model,
    [search_flights, book_flight, transfer_to_hotel_assistant],
    prompt=make_prompt("You are a flight booking assistant"),
    name="flight_assistant",
)

hotel_assistant = create_react_agent(
    model,
    [search_hotels, book_hotel, transfer_to_flight_assistant],
    prompt=make_prompt("You are a hotel booking assistant"),
    name="hotel_assistant",
)

# Compile and run!
builder = create_swarm(
    [flight_assistant, hotel_assistant], default_active_agent="flight_assistant"
)
app = builder.compile()

png_bytes = app.get_graph().draw_mermaid_png()
with open("./LangGraph_3_Swarm/swarm_example_customer_support.png", "wb") as f:
    f.write(png_bytes)












# Test the swarm
if __name__ == "__main__":
    print("üöÄ Testing Customer Support Swarm...")
    print("=" * 50)
    
    # Test configuration with user ID
    config = {"configurable": {"user_id": "user123"}}
    
    # Test 1: Flight booking
    print("\nüõ´ Test 1: Booking a flight")
    print("-" * 30)
    
    response1 = app.invoke(
        {"messages": [{"role": "user", "content": "I need to book a flight from Boston to New York tomorrow"}]},
        config=config
    )
    
    print("User:", "I need to book a flight from Boston to New York tomorrow")
    print("Assistant:", response1["messages"][-1].content)
    
    # Test 2: Hotel booking (should transfer to hotel assistant)
    print("\nüè® Test 2: Booking a hotel")
    print("-" * 30)
    
    response2 = app.invoke(
        {"messages": [{"role": "user", "content": "Now I need a hotel in New York"}]},
        config=config
    )
    
    print("User:", "Now I need a hotel in New York")
    print("Assistant:", response2["messages"][-1].content)
    
    # Test 3: Combined request (flight + hotel in one message)
    print("\n‚úàÔ∏èüè® Test 3: Combined flight and hotel booking")
    print("-" * 40)
    
    # Use a different user to avoid conflicts
    config2 = {"configurable": {"user_id": "user456"}}
    
    try:
        response3 = app.invoke(
            {"messages": [{"role": "user", "content": "I need to book a flight from Boston to New York tomorrow and also need a hotel in New York"}]},
            config=config2
        )
        
        print("User:", "I need to book a flight from Boston to New York tomorrow and also need a hotel in New York")
        print("Assistant:", response3["messages"][-1].content)
        
        # Check what was actually booked
        print("\nüìã Test 3b: Combined booking reservation status")
        print("-" * 30)
        
        print("Final reservation for user456:")
        reservation2 = dict(RESERVATIONS['user456'])
        for key, value in reservation2.items():
            print(f"  {key}: {value}")
            
    except Exception as e:
        print(f"Error occurred: {str(e)[:200]}...")
        print("This shows that Swarm has challenges with complex multi-step requests in a single message")
    
    # Test 4: Original user reservation status
    print("\nüìã Test 4: Original user reservation status")
    print("-" * 30)
    
    print("Final reservation for user123:")
    reservation = dict(RESERVATIONS['user123'])
    for key, value in reservation.items():
        print(f"  {key}: {value}")
    
    print("\n‚úÖ Swarm test completed successfully!")
    print("=" * 50)

